require(readxl)
library(stringr)
require(plyr)  # el papá de dplyr
library(dplyr) # manipular data
library(tidyr) # "tidy data" o el paquete que SIEMPRE van a prender
library(raster)
library(ggplot2)
library(viridis)
dir1 <- "/media/hectorpina/yanipaperdisk/Proyectos R/elecciones_puebla_2019/data/in"  # poner ruta
dir2 <- "/media/hectorpina/yanipaperdisk/Proyectos R/elecciones_puebla_2019/graphs"  # poner ruta
dir3 <- "/media/hectorpina/yanipaperdisk/Proyectos R/elecciones_puebla_2019//mapas"
dir4 <- "/media/hectorpina/yanipaperdisk/Proyectos R/elecciones_puebla_2019/data/out"
#LLAMAR DATOS
mpos <- read_excel(paste(dir1, "municipios_puebla.xls", sep="/"))
eleccion <- read_excel(paste(dir1, "eleccion_puebla_computos_2019.xlsx", sep="/"))
############## UNIR DATAFRAMES ##############
#Seleccionar variables que nos sirven de municipios
mpos <- mpos[,c(3,4,5)]
#Unir dataframes
data2019 <- merge(eleccion, mpos, by="SECCION", all=T)
#Remover objetos
rm(mpos,eleccion)
View(data2019)
############## TERMINAR DE LIMPIAR LA BASE DE DATOS ##############
#Reordenar variables
data2019 <- data2019[c(3,4,15,16,5,6,1,2,7,8:14)]
#Borrar rows con NA en Clave_Casilla
data2019 <- data2019[!rowSums(is.na(data2019[8])), ]
#Poner ceros a la izquierda en ID_Municipio
data2019$ID_MUNICIPIO <- str_pad(data2019$ID_MUNICIPIO, width=3, side="left", pad="0")
#Convertir primero en caracter para que no les asigne otro valor
data2019 <- mutate(data2019,
ALBERTO_JIMENEZ=as.character(ALBERTO_JIMENEZ),
ENRIQUE_CARDENAS=as.character(ENRIQUE_CARDENAS),
MIGUEL_BARBOSA=as.character(MIGUEL_BARBOSA),
NO_REGISTRADOS=as.character(NO_REGISTRADOS),
NULOS=as.character(NULOS),
TOTAL_VOTOS=as.character(TOTAL_VOTOS),
LISTA_NOMINAL=as.character(LISTA_NOMINAL)
)
#Convertir ahora sí en numércios
data2019 <- mutate(data2019,
ALBERTO_JIMENEZ=as.numeric(ALBERTO_JIMENEZ),
ENRIQUE_CARDENAS=as.numeric(ENRIQUE_CARDENAS),
MIGUEL_BARBOSA=as.numeric(MIGUEL_BARBOSA),
NO_REGISTRADOS=as.numeric(NO_REGISTRADOS),
NULOS=as.numeric(NULOS),
TOTAL_VOTOS=as.numeric(TOTAL_VOTOS),
LISTA_NOMINAL=as.numeric(LISTA_NOMINAL)
)
#Convertir NA por ceros - Por si hay
data2019$ALBERTO_JIMENEZ[is.na(data2019$ALBERTO_JIMENEZ)] <- 0
data2019$ENRIQUE_CARDENAS[is.na(data2019$ENRIQUE_CARDENAS)] <- 0
data2019$MIGUEL_BARBOSA[is.na(data2019$MIGUEL_BARBOSA)] <- 0
data2019$NO_REGISTRADOS[is.na(data2019$NO_REGISTRADOS)] <- 0
data2019$NULOS[is.na(data2019$NULOS)] <- 0
data2019$TOTAL_VOTOS[is.na(data2019$TOTAL_VOTOS)] <- 0
data2019$LISTA_NOMINAL[is.na(data2019$LISTA_NOMINAL)] <- 0
#CONVERTIR VARIABLES A CARACTERES QUE OLVIDE ARRIBA JA
data2019$ID_DISTRITO <- as.character(data2019$ID_DISTRITO)
data2019$SECCION <- as.character(data2019$SECCION)
data2019$ID_MUNICIPIO <- as.character(data2019$ID_MUNICIPIO)
tempoA <-  data2019 %>%
group_by(ID_MUNICIPIO, MUNICIPIO) %>%
summarise(
ALBERTO_JIMENEZ = sum(ALBERTO_JIMENEZ),
ENRIQUE_CARDENAS = sum(ENRIQUE_CARDENAS),
MIGUEL_BARBOSA = sum(MIGUEL_BARBOSA),
NO_REGISTRADOS = sum(NO_REGISTRADOS),
NULOS = sum(NULOS),
TOTAL_VOTOS = sum(TOTAL_VOTOS),
LISTA_NOMINAL =sum(LISTA_NOMINAL)) %>%
ungroup() %>%
group_by(ID_MUNICIPIO, MUNICIPIO) %>%
mutate(
aj_porc = round((ALBERTO_JIMENEZ/TOTAL_VOTOS)*100, 2),
ec_porc = round((ENRIQUE_CARDENAS/TOTAL_VOTOS)*100, 2),
mb_porc = round((MIGUEL_BARBOSA/TOTAL_VOTOS)*100, 2),
no_reg_porc = round((NO_REGISTRADOS/TOTAL_VOTOS)*100, 2),
nulos_porc = round((NULOS/TOTAL_VOTOS)*100, 2),
parti_porc = round((TOTAL_VOTOS/LISTA_NOMINAL)*100, 2),
abst_porc = round((100-parti_porc),2)
)
View(tempoA)
################################################################
########## PREPARAR LA BASE TEMPORAL PARA MAPEAR #####################
#CREAR VARIABLE DE GANADOR
tempoA$GANADOR <- apply(tempoA[3:6],  1, function(x)names(tempoA[,3:6])[which.max(x)])
#CREAR VARIABLE CON LA VOTACIÓN GANADORA POR PORCENTAJE
tempoA$PORC_GANADOR <- apply(tempoA[10:13], 1, max)
#CREAR VARIABLE CLAVE DEL GANADOR
tempoA$CVE_GANADOR <- tempoA$GANADOR
#REEMPLAZAR CARACTERES DE REGISTROS EN VARIABLE CLAVE DEL GANADOR
tempoA$CVE_GANADOR <- replace(tempoA$CVE_GANADOR, tempoA$CVE_GANADOR=="ALBERTO_JIMENEZ", "1")
tempoA$CVE_GANADOR <- replace(tempoA$CVE_GANADOR, tempoA$CVE_GANADOR=="ENRIQUE_CARDENAS", "2")
tempoA$CVE_GANADOR <- replace(tempoA$CVE_GANADOR, tempoA$CVE_GANADOR=="MIGUEL_BARBOSA", "3")
tempoA$CVE_GANADOR <- replace(tempoA$CVE_GANADOR, tempoA$CVE_GANADOR=="NO_REGISTRADOS", "4")
#CONVERTIR EN  FACTOR LA VARIABLE DEL GANADOR PARA PODER MAPEAR
tempoA$CVE_GANADOR <- as.factor(tempoA$CVE_GANADOR)
#Abrir shapefiles
munics_puebla <- shapefile("/media/hectorpina/yanipaperdisk/Proyectos R/elecciones_puebla_2019/data/in/mapas_puebla/MUNICIPIO.shp")
#EXPLORAR OBJETO
head(munics_puebla@data)
#DIBUJAR MAPA
plot(munics_puebla)
#EXPLORAR POLIGONO
munics_puebla@data
head(munics_puebla)
str(munics_puebla)
View(munics_puebla@data)
#VOLVER MINÚSCULAS
#En esta ocasion lo omitire
#names(edomex_secciones) <- tolower(names(edomex_secciones))
#VOLVER CARACTER MI VARIABLE PARA UNIR
munics_puebla$municipio <- as.character(munics_puebla$municipio)
#RECODIFICAR EL MAPA
munics_puebla <- spTransform(munics_puebla, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
#VOLVER DATA FRAME EL POLIGONO
pueblaDF <- fortify(munics_puebla, region = "municipio")
#Poner ceros a la izquierda en ID
pueblaDF$id <- str_pad(pueblaDF$id, width=3, side="left", pad="0")
#Probar Mapa
ggplot() +
geom_polygon(data = pueblaDF, aes(x=long, y=lat, group=group)) +
coord_map()
#MERGE
municipiosDF <- merge(pueblaDF, tempoA, by.x="id", by.y="ID_MUNICIPIO", all.y=T)
View(municipiosDF)
#Guardar base limpia
write.csv(municipiosDF, paste(dir4, "elecciones_puebla_por_municipio_computo_2019_coordenadas.csv", sep="/"), fileEncoding ="UTF-8", row.names=F)
View(municipiosDF)
rm(municipiosDF)
